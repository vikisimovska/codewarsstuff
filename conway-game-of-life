var test = [[ 1, 0, 0 ], 
            [ 0, 1, 1 ], 
            [ 1, 1, 0 ] ]

var checkAround = function(array, i, j){
  var count = 0;
  (array[i+1]) && (array[i+1][j-1]) && (count += array[i+1][j-1]);
  (array[i+1]) && (array[i+1][j]) && (count += array[i+1][j]);
  (array[i+1]) && (array[i+1][j+1]) && (count += array[i+1][j+1]);
  (array[i-1]) && (array[i-1][j-1]) && (count += array[i-1][j-1]);
  (array[i-1]) && (array[i-1][j]) && (count += array[i-1][j]);
  (array[i-1]) && (array[i-1][j+1]) && (count += array[i-1][j+1]);
  (array[i][j+1]) && (count += array[i][j+1]);
  (array[i][j-1]) && (count += array[i][j-1]);
  return count;
}

// console.log('should be 1: ', checkAround(test, 0, 0));
// console.log('should be 3: ', checkAround(test, 0, 1));
// console.log('should be 2: ', checkAround(test, 0, 2));
// console.log('should be 4: ', checkAround(test, 1, 0));
// console.log('should be 4: ', checkAround(test, 1, 1));
// console.log('should be 2: ', checkAround(test, 1, 2));
// console.log('should be 2: ', checkAround(test, 2, 0));
// console.log('should be 3: ', checkAround(test, 2, 1));
// console.log('should be 3: ', checkAround(test, 2, 2));


function getGeneration(cells, generations){

  var result;

  var recurse = function(prevWork, depth){ 
    if (depth === generations){
      result = prevWork;
      return;
    }
    var work = [];
    for (var i = 0; i < prevWork.length; i++){
      work.push(prevWork[i].slice());
    }

    for (var i = 0; i < prevWork.length; i++){
      for (var j = 0; j < prevWork[i].length; j++){
        if (prevWork[i][j] === 1){
          if (checkAround(prevWork, i, j) < 2){
            work[i][j] = 0;
          }
          else if (checkAround(prevWork, i, j) > 3){
            work[i][j] = 0; 
          }
        }
        else if (prevWork[i][j] === 0){
          if (checkAround(prevWork, i, j) === 3){
            work[i][j] = 1;
          }
        }
      }
    }

    recurse(work, depth+1);
  }
  recurse(cells, 0);

  return result;

}

// getGeneration(test, 3);