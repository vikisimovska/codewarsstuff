var test = [[ 1, 0, 0 ], 
            [ 0, 1, 1 ], 
            [ 1, 1, 0 ] ]

var checkAround = function(array, i, j){
  var count = 0;
  (array[i+1]) && (array[i+1][j-1]) && (count += array[i+1][j-1]);
  (array[i+1]) && (array[i+1][j]) && (count += array[i+1][j]);
  (array[i+1]) && (array[i+1][j+1]) && (count += array[i+1][j+1]);
  (array[i-1]) && (array[i-1][j-1]) && (count += array[i-1][j-1]);
  (array[i-1]) && (array[i-1][j]) && (count += array[i-1][j]);
  (array[i-1]) && (array[i-1][j+1]) && (count += array[i-1][j+1]);
  (array[i][j+1]) && (count += array[i][j+1]);
  (array[i][j-1]) && (count += array[i][j-1]);
  return count;
}

var addZeroes = function(matrix){
  var result = [];
  for (var i = 0; i < matrix.length; i++){
    result.push(matrix[i].slice());
  }
  for (var i = 0; i < result.length; i++){
    result[i].unshift(0);
    result[i].push(0);
  }
  var rowLength = result[0].length; 
  var toBeAdded = Array.apply(null, new Array(rowLength)).map(Number.prototype.valueOf,0);
  result.push(toBeAdded);
  result.unshift(toBeAdded);
  var result = result.slice();
  return result;
}

var removeTop = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix[0].length; i++){
    count += matrix[0][i];
  }
  while (count === 0){
    matrix.shift();
    count = 0; 
    for (var i = 0; i < matrix[0].length; i++){
      count += matrix[0][i];
    }
  }
  return matrix;
}

var removeBot = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix[matrix.length-1].length; i++){
    count += matrix[matrix.length-1][i];
  }
  while (count === 0){
    matrix.pop();
    var count = 0; 
    for (var i = 0; i < matrix[matrix.length-1].length; i++){
      count += matrix[matrix.length-1][i];
    }
  }
  return matrix;
}

var removeLeft = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix.length; i++){
    count += matrix[i][0];
  }
  var result = [];
  for (var i = 0; i < matrix.length; i++){
    result.push(matrix[i].slice());
  }
  while (count === 0){
    for (var j = 0; j < matrix.length; j++){
      result[j].shift();
    }
    var count = 0; 
    for (var i = 0; i < result.length; i++){
      count += result[i][0];
    }
  }
  return result;
}

var removeRight = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix.length; i++){
    count += matrix[i][matrix[i].length-1];
  }
  var result = [];
  for (var i = 0; i < matrix.length; i++){
    result.push(matrix[i].slice());
  }
  while (count === 0){
    for (var j = 0; j < result.length; j++){
      result[j].pop();
    }
    var count = 0; 
    for (var i = 0; i < result.length; i++){
      count += result[i][result[i].length-1];
    }
  }
  return result;
}

var removeZeroes = function(matrix){
  matrix = removeTop(matrix);
  matrix = removeBot(matrix);
  matrix = removeLeft(matrix);
  matrix = removeRight(matrix);
  return matrix;
}

function getGeneration(cells, generations){

  var result;

  var recurse = function(prevWork, depth){ 
    if (depth === generations){
      result = prevWork;
      return;
    }
    prevWork = addZeroes(prevWork);
    var work = [];
    for (var i = 0; i < prevWork.length; i++){
      work.push(prevWork[i].slice());
    }

    for (var i = 0; i < prevWork.length; i++){
      for (var j = 0; j < prevWork[i].length; j++){
        if (prevWork[i][j] === 1){
          if (checkAround(prevWork, i, j) < 2){
            work[i][j] = 0;
          }
          else if (checkAround(prevWork, i, j) > 3){
            work[i][j] = 0; 
          }
        }
        else if (prevWork[i][j] === 0){
          if (checkAround(prevWork, i, j) === 3){
            work[i][j] = 1;
          }
        }
      }
    }
    work = removeZeroes(work);

    recurse(work, depth+1);
  }
  recurse(cells, 0);

  return result;

}