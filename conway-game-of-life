var test = [[ 1, 0, 0 ], 
            [ 0, 1, 1 ], 
            [ 1, 1, 0 ] ]

var checkAround = function(array, i, j){
  var count = 0;
  (array[i+1]) && (array[i+1][j-1]) && (count += array[i+1][j-1]);
  (array[i+1]) && (array[i+1][j]) && (count += array[i+1][j]);
  (array[i+1]) && (array[i+1][j+1]) && (count += array[i+1][j+1]);
  (array[i-1]) && (array[i-1][j-1]) && (count += array[i-1][j-1]);
  (array[i-1]) && (array[i-1][j]) && (count += array[i-1][j]);
  (array[i-1]) && (array[i-1][j+1]) && (count += array[i-1][j+1]);
  (array[i][j+1]) && (count += array[i][j+1]);
  (array[i][j-1]) && (count += array[i][j-1]);
  return count;
}

// console.log('should be 1: ', checkAround(test, 0, 0));
// console.log('should be 3: ', checkAround(test, 0, 1));
// console.log('should be 2: ', checkAround(test, 0, 2));
// console.log('should be 4: ', checkAround(test, 1, 0));
// console.log('should be 4: ', checkAround(test, 1, 1));
// console.log('should be 2: ', checkAround(test, 1, 2));
// console.log('should be 2: ', checkAround(test, 2, 0));
// console.log('should be 3: ', checkAround(test, 2, 1));
// console.log('should be 3: ', checkAround(test, 2, 2));

var addZeroes = function(matrix){
  for (var i = 0; i < matrix.length; i++){
    matrix[i].unshift(0);
    matrix[i].push(0);
  }
  var rowLength = matrix[0].length; 
  console.log("ROW LENGTH: ", rowLength);
  var toBeAdded = Array.apply(null, new Array(rowLength)).map(Number.prototype.valueOf,0);
  matrix.push(toBeAdded);
  matrix.unshift(toBeAdded);
  var result = matrix.slice();
  return result;
}

var removeTop = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix[0].length; i++){
    count += matrix[0][i];
  }
  if (count === 0){
    matrix.shift();
  }
  return matrix;
}

var removeBot = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix[matrix.length-1].length; i++){
    count += matrix[matrix.length-1][i];
  }
  if (count === 0){
    matrix.pop();
  }
  return matrix;
}

var removeLeft = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix.length; i++){
    count += matrix[i][0];
  }
  console.log(count);
  var result = [];
  for (var i = 0; i < great.length; i++){
    result.push(great[i].slice());
  }
  if (count === 0){
    for (var j = 0; j < matrix.length; j++){
      result[j].shift();
    }
  }
  return result;
}

var removeRight = function(matrix){
  var count = 0; 
  for (var i = 0; i < matrix.length; i++){
    count += matrix[i][matrix.length-1];
  }
  console.log(count);
  var result = [];
  for (var i = 0; i < great.length; i++){
    result.push(great[i].slice());
  }
  if (count === 0){
    for (var j = 0; j < matrix.length; j++){
      result[j].pop();
    }
  }
  return result;
}

var great = addZeroes(test);
console.log(great);
var another = removeRight(great);
console.log(another);

function getGeneration(cells, generations){

  var result;

  var recurse = function(prevWork, depth){ 
    if (depth === generations){
      result = prevWork;
      return;
    }
    var work = [];
    for (var i = 0; i < prevWork.length; i++){
      work.push(prevWork[i].slice());
    }

    for (var i = 0; i < prevWork.length; i++){
      for (var j = 0; j < prevWork[i].length; j++){
        if (prevWork[i][j] === 1){
          if (checkAround(prevWork, i, j) < 2){
            work[i][j] = 0;
          }
          else if (checkAround(prevWork, i, j) > 3){
            work[i][j] = 0; 
          }
        }
        else if (prevWork[i][j] === 0){
          if (checkAround(prevWork, i, j) === 3){
            work[i][j] = 1;
          }
        }
      }
    }

    recurse(work, depth+1);
  }
  recurse(cells, 0);

  return result;

}

// getGeneration(test, 3);